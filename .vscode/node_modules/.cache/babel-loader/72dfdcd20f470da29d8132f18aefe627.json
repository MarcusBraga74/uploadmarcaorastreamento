{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teres\\\\Desktop\\\\RastroIO\\\\src\\\\hooks\\\\theme.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport usePersistedState from './usePersistedState';\nimport dark from '../styles/themes/dark';\nimport light from '../styles/themes/light';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppThemeContext = /*#__PURE__*/createContext({});\n\nconst AppThemeProvider = ({\n  children\n}) => {\n  _s();\n\n  const [theme, setTheme] = usePersistedState('@RastroIO:theme', light);\n  const toggleTheme = useCallback(() => {\n    setTheme(theme.title === 'light' ? dark : light);\n  }, [setTheme, theme.title]);\n  return /*#__PURE__*/_jsxDEV(AppThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppThemeProvider, \"+Y6yTPLWr4hbJdwIuO1WWSCoqGE=\", false, function () {\n  return [usePersistedState];\n});\n\n_c = AppThemeProvider;\nexport default AppThemeProvider;\nexport function useTheme() {\n  _s2();\n\n  const context = useContext(AppThemeContext);\n\n  if (!context) {\n    throw new Error('You can use this hook just inside AppThemeProvider');\n  }\n\n  return context;\n}\n\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AppThemeProvider\");","map":{"version":3,"sources":["C:/Users/teres/Desktop/RastroIO/src/hooks/theme.tsx"],"names":["React","createContext","useCallback","useContext","ThemeProvider","usePersistedState","dark","light","AppThemeContext","AppThemeProvider","children","theme","setTheme","toggleTheme","title","useTheme","context","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,QAA8D,OAA9D;AAEA,SAAuBC,aAAvB,QAA4C,mBAA5C;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;AAOA,MAAMC,eAAe,gBAAGP,aAAa,CACnC,EADmC,CAArC;;AAIA,MAAMQ,gBAA0B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACnD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,iBAAiB,CACzC,iBADyC,EAEzCE,KAFyC,CAA3C;AAKA,QAAMM,WAAW,GAAGX,WAAW,CAAC,MAAM;AACpCU,IAAAA,QAAQ,CAACD,KAAK,CAACG,KAAN,KAAgB,OAAhB,GAA0BR,IAA1B,GAAiCC,KAAlC,CAAR;AACD,GAF8B,EAE5B,CAACK,QAAD,EAAWD,KAAK,CAACG,KAAjB,CAF4B,CAA/B;AAIA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEH,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAAjC;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEF,KAAtB;AAAA,gBAA8BD;AAA9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAfD;;GAAMD,gB;UACsBJ,iB;;;KADtBI,gB;AAiBN,eAAeA,gBAAf;AAEA,OAAO,SAASM,QAAT,GAAoB;AAAA;;AACzB,QAAMC,OAAO,GAAGb,UAAU,CAACK,eAAD,CAA1B;;AAEA,MAAI,CAACQ,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD;;IAReD,Q","sourcesContent":["import React, { createContext, useCallback, useContext } from 'react';\r\n\r\nimport { DefaultTheme, ThemeProvider } from 'styled-components';\r\nimport usePersistedState from './usePersistedState';\r\n\r\nimport dark from '../styles/themes/dark';\r\nimport light from '../styles/themes/light';\r\n\r\ninterface AppThemeContextData {\r\n  theme: DefaultTheme;\r\n  toggleTheme(): void;\r\n}\r\n\r\nconst AppThemeContext = createContext<AppThemeContextData>(\r\n  {} as AppThemeContextData,\r\n);\r\n\r\nconst AppThemeProvider: React.FC = ({ children }) => {\r\n  const [theme, setTheme] = usePersistedState<DefaultTheme>(\r\n    '@RastroIO:theme',\r\n    light,\r\n  );\r\n\r\n  const toggleTheme = useCallback(() => {\r\n    setTheme(theme.title === 'light' ? dark : light);\r\n  }, [setTheme, theme.title]);\r\n\r\n  return (\r\n    <AppThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\r\n    </AppThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppThemeProvider;\r\n\r\nexport function useTheme() {\r\n  const context = useContext(AppThemeContext);\r\n\r\n  if (!context) {\r\n    throw new Error('You can use this hook just inside AppThemeProvider');\r\n  }\r\n\r\n  return context;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}