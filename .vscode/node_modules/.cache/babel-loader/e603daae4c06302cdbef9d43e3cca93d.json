{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teres\\\\Desktop\\\\RastroIO\\\\src\\\\hooks\\\\modal.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContext = /*#__PURE__*/createContext({});\n\nconst ModalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [modals, setModals] = useState([]);\n  const addModal = useCallback(({\n    component,\n    onClose\n  }) => {\n    const modal = {\n      id: uuid(),\n      component,\n      onClose\n    };\n    setModals(prev => [...prev, modal]);\n  }, [setModals]);\n  const removeModal = useCallback(id => {\n    setModals(prev => prev.filter(modal => modal.id !== id));\n  }, [setModals]);\n  return /*#__PURE__*/_jsxDEV(ModalContext.Provider, {\n    value: {\n      modals,\n      addModal,\n      removeModal\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalProvider, \"aXlJps4NGsn41lcm4n3zxkKvgD8=\");\n\n_c = ModalProvider;\nexport default ModalProvider;\nexport function useModal() {\n  _s2();\n\n  const context = useContext(ModalContext);\n\n  if (!context) {\n    throw new Error('You can use this hook just inside AppThemeProvider');\n  }\n\n  return context;\n}\n\n_s2(useModal, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalProvider\");","map":{"version":3,"sources":["C:/Users/teres/Desktop/RastroIO/src/hooks/modal.tsx"],"names":["React","createContext","useCallback","useContext","useState","v4","uuid","ModalContext","ModalProvider","children","modals","setModals","addModal","component","onClose","modal","id","prev","removeModal","filter","useModal","context","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;;AAcA,MAAMC,YAAY,gBAAGN,aAAa,CAAmB,EAAnB,CAAlC;;AAEA,MAAMO,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAChD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAgB,EAAhB,CAApC;AAEA,QAAMQ,QAAQ,GAAGV,WAAW,CAC1B,CAAC;AAAEW,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAD,KAAqD;AACnD,UAAMC,KAAK,GAAG;AACZC,MAAAA,EAAE,EAAEV,IAAI,EADI;AAEZO,MAAAA,SAFY;AAGZC,MAAAA;AAHY,KAAd;AAMAH,IAAAA,SAAS,CAACM,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUF,KAAV,CAAT,CAAT;AACD,GATyB,EAU1B,CAACJ,SAAD,CAV0B,CAA5B;AAaA,QAAMO,WAAW,GAAGhB,WAAW,CAC5Bc,EAAD,IAAgB;AACdL,IAAAA,SAAS,CAACM,IAAI,IAAIA,IAAI,CAACE,MAAL,CAAYJ,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaA,EAAlC,CAAT,CAAT;AACD,GAH4B,EAI7B,CAACL,SAAD,CAJ6B,CAA/B;AAOA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAED,MAAAA,MAAF;AAAUE,MAAAA,QAAV;AAAoBM,MAAAA;AAApB,KAA9B;AAAA,cACGT;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5BD;;GAAMD,a;;KAAAA,a;AA8BN,eAAeA,aAAf;AAEA,OAAO,SAASY,QAAT,GAAoB;AAAA;;AACzB,QAAMC,OAAO,GAAGlB,UAAU,CAACI,YAAD,CAA1B;;AAEA,MAAI,CAACc,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD;;IAReD,Q","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\ninterface IModalProps {\r\n  id: string;\r\n  component: React.ComponentType;\r\n  onClose?: () => void;\r\n}\r\n\r\ninterface ModalContextData {\r\n  modals: IModalProps[];\r\n  addModal(data: Omit<IModalProps, 'id'>): void;\r\n  removeModal(id: string): void;\r\n}\r\n\r\nconst ModalContext = createContext<ModalContextData>({} as ModalContextData);\r\n\r\nconst ModalProvider: React.FC = ({ children }) => {\r\n  const [modals, setModals] = useState<IModalProps[]>([]);\r\n\r\n  const addModal = useCallback(\r\n    ({ component, onClose }: Omit<IModalProps, 'id'>) => {\r\n      const modal = {\r\n        id: uuid(),\r\n        component,\r\n        onClose,\r\n      };\r\n\r\n      setModals(prev => [...prev, modal]);\r\n    },\r\n    [setModals],\r\n  );\r\n\r\n  const removeModal = useCallback(\r\n    (id: string) => {\r\n      setModals(prev => prev.filter(modal => modal.id !== id));\r\n    },\r\n    [setModals],\r\n  );\r\n\r\n  return (\r\n    <ModalContext.Provider value={{ modals, addModal, removeModal }}>\r\n      {children}\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ModalProvider;\r\n\r\nexport function useModal() {\r\n  const context = useContext(ModalContext);\r\n\r\n  if (!context) {\r\n    throw new Error('You can use this hook just inside AppThemeProvider');\r\n  }\r\n\r\n  return context;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}